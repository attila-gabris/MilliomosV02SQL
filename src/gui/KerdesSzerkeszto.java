package gui;

import java.awt.Font;
import java.awt.Frame;
import java.sql.SQLException;
import java.util.Collections;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import model.DBModel;
import model.Kerdes;

public class KerdesSzerkeszto extends javax.swing.JDialog {

    private Frame parent; //A szülő ablak
    private List<Kerdes> kerdesek; //A kérdések listája 
    private DBModel model; //DAO
    private JLabel label = new JLabel(); //A JOptionPane feliratok formázásához szükséges objektum.

    /**
     * Creates new form KerdesSzerkeszto
     */
    public KerdesSzerkeszto(java.awt.Frame parent, boolean modal, List<Kerdes> kerdesek, DBModel model) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        this.parent = parent;
        this.model = model;
        this.kerdesek = kerdesek;
        Collections.sort(kerdesek); //A kérdéseket sorrendbe állítja az id szerint
        label.setFont(new Font("Tahoma", Font.BOLD, 12)); //A JOptionPane feliratok formázása

        updateList(); //A kérdések megjelenítése a listában 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnUj = new javax.swing.JButton();
        btnSzerkeszt = new javax.swing.JButton();
        btnTorol = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstKerdesek = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Kérdések");

        btnUj.setText("Új");
        btnUj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUjActionPerformed(evt);
            }
        });

        btnSzerkeszt.setText("Szerkeszt");
        btnSzerkeszt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSzerkesztActionPerformed(evt);
            }
        });

        btnTorol.setText("Töröl");
        btnTorol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTorolActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        lstKerdesek.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lstKerdesek.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(lstKerdesek);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnOK, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnUj, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSzerkeszt, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnTorol, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnOK, btnSzerkeszt, btnTorol, btnUj});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUj)
                        .addGap(18, 18, 18)
                        .addComponent(btnSzerkeszt)
                        .addGap(18, 18, 18)
                        .addComponent(btnTorol)
                        .addGap(18, 332, Short.MAX_VALUE)
                        .addComponent(btnOK)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        setVisible(false); //Az ablak bezárása
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnUjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUjActionPerformed
        KerdesAdatok ka = new KerdesAdatok(parent, true, null); //Üres ablak megjelenítése az új kérdés és lehetséges válaszok számára.
        ka.setVisible(true);
        if (ka.isMentes()) {
            try {
                model.addKerdes(ka.getKerdes()); //Az új kérdés hozzáadása az adatbázishoz
                kerdesek = model.getAllKerdes(); //A bővített kérdéslistát újra lekérdezi az adatbázisból (a sorszám miatt muszáj)
                updateList(); //A megjelenített lista frissítése
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage(),
                        "Adatbázis hiba", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnUjActionPerformed

    private void btnSzerkesztActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSzerkesztActionPerformed
        Kerdes selected = (Kerdes) lstKerdesek.getSelectedValue();
        if (selected != null) {
            KerdesAdatok ka = new KerdesAdatok(parent, true, selected); //A kiválasztott kérdés és a válaszok megjelenítése új ablakban.
            ka.setVisible(true);
            if (ka.isMentes()) {
                try {
                    model.updateKerdes(ka.getKerdes()); //A kérdés módosítása az adatbázisban
                    updateList(); //A megjelenített lista frissítése
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getMessage(),
                            "Adatbázis hiba", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            label.setText("Válassz egy kérdést a szerkesztéshez");
            JOptionPane.showMessageDialog(rootPane, label,
                    "Nincs kiválasztott kérdés", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSzerkesztActionPerformed

    private void btnTorolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTorolActionPerformed
        Kerdes selected = (Kerdes) lstKerdesek.getSelectedValue();
        if (selected != null) {
            label.setText("Biztos, hogy törölni akarod?");
            String[] optionsIgenNem = {"Igen", "Nem"};
            int valasz = JOptionPane.showOptionDialog(parent, label,
                    "Törlési megerősítés", JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, optionsIgenNem, null);
            if (valasz == JOptionPane.YES_OPTION) {
                try {
                    model.removeKerdes(selected); //A kérdés törlése az adatbázisból
                    kerdesek.remove(selected); //A kérdés törlése a listából
                    updateList(); //A megjelenített lista frissítése
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getMessage(),
                            "Adatbázis hiba", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            label.setText("Válassz egy kérdést a törléshez");
            JOptionPane.showMessageDialog(rootPane, label,
                    "Nincs kiválasztott kérdés", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnTorolActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnSzerkeszt;
    private javax.swing.JButton btnTorol;
    private javax.swing.JButton btnUj;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lstKerdesek;
    // End of variables declaration//GEN-END:variables

    private void updateList() {
        lstKerdesek.setListData(kerdesek.toArray()); //A megjelenített lista frissítése
    }

}
